#!/usr/bin/env ruby
#
# Usage: robot-status-board [-v] [repository:]workflow
#        where repository = 'dor' by default
#
# @example
#   robot-status-board accessionWF
#
require 'optparse'
require 'uri'
require 'awesome_print'
require File.expand_path(File.dirname(__FILE__) + '/../lib/robot-master/status_board')

class RobotStatusBoardCLI

  def run(args)
    flags = {
      :verbose => false,
      :debug => false,
      :lane => 'default',
      :wf_uri => 'http://localhost:8080/workflow'
    }
    
    # args = %w{--help} if args.nil? or args.empty?
  
    OptionParser.new do |opts|
      opts.banner = "Usage:\t#{File.basename(__FILE__)} [flags]"
      opts.on('-v', '--verbose', 'Run verbosely, use multiple times for debug level output') do
        flags[:debug] = true if flags[:verbose]  # -vv
        flags[:verbose] = true
      end
      opts.on('--uri URI', 'Use given Workflow Service endpoint (default: ' + flags[:wf_uri] + ')') do |uri|
        flags[:wf_uri] = URI(uri).to_s # canonicalize
      end
      opts.on('--lane LANE', 'Use given lane (default: ' + flags[:lane] + ')') do |l|
        flags[:lane] = l
      end
    end.parse!(args)
    ap({:args => args}) if flags[:debug]

    puts ['repo', 'wf', 'lane', 'step', 'waiting', 'ready', 'error', 'queued', 'completed'].join(' | ')
    puts ['----', '--', '----', '----', '-------', '-----', '-----', '------', '---------'].join(' | ')
    Dir.glob(File.dirname(__FILE__) + '/../config/workflows/**/*.xml').each do |fn|

      # Initialize the workflow, and set the repository if prepended with :
      repo, wf = fn.gsub(/^.*config\/workflows\//, '').gsub('.xml', '').gsub('/', ':').split(/:/, 2)

      # iterate over all the steps in the given repo:wf
      RobotStatusBoard.new.map_workflow(flags[:wf_uri] + '/workflow_queue', repo, wf, flags) {|row|
        puts row.join(' | ')
      }
    end
  end
end

# __MAIN__
RobotStatusBoardCLI.new.run(ARGV)
