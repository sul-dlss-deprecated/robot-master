#!/usr/bin/env ruby
#
# Usage: robot-master [-v] [repository:]workflow
#        where repository = 'dor' by default
#
# @example
#   robot-master accessionWF
#   robot-master dor:accessionWF
#   robot-master --repeat-every=60 dor:accessionWF  # daemon mode
#   robot-master --repository=sdr sdrIngestWF
#
require 'optparse'
require 'awesome_print'

class RobotMasterCLI
  def perform(workflow, flags = {})
    ap({:workflow => workflow, :flags => flags}) if flags[:debug]
    RobotMaster::Workflow.perform(flags[:repository], workflow)
  end
  
  def run(args)
    flags = {
      :verbose => false,
      :debug => false,
      :repository => 'dor',
      :loop => 0,
      :robot_environment => ENV['ROBOT_ENVIRONMENT'] || 'development',
      :robot_log_level => ENV['ROBOT_LOG_LEVEL'] || 'info',
      :robot_log => ENV['ROBOT_LOG'] || '-'
    }
    
    args = %w{--help} if args.nil? or args.empty?
  
    OptionParser.new do |opts|
      opts.banner = "Usage:\t#{File.basename(__FILE__)} [flags] [repo:]workflow"
      opts.on('--repository=REPOSITORY', "Use the given repository (default: #{flags[:repository]})") do |v|
        flags[:repository] = v
      end
      opts.on('--environment=ENV', "Use the given environment (default: #{flags[:robot_environment]})") do |v|
        flags[:robot_environment] = v
      end
      opts.on('--log-level=LEVEL', "Use the given log-level (default: #{flags[:robot_log_level]})") do |v|
        flags[:robot_log_level] = v
      end      
      opts.on('--log=FILE', "Use the given log file (default: #{flags[:robot_log]})") do |v|
        flags[:robot_log] = v
      end      
      opts.on('-R SECONDS', '--repeat-every=SECONDS', "Keep running every SECONDS in an infinite loop") do |v|
        flags[:loop] = v.to_i
      end      
      opts.on('-v', '--verbose', 'Run verbosely, use multiple times for debug level output') do
        flags[:debug] = true if flags[:verbose]  # -vv
        flags[:verbose] = true
      end
    end.parse!(args)
    ap({:args => args}) if flags[:debug]
    
    # Initialize the workflow, and set the repository if prepended with :
    flags[:workflow] = args.shift
    raise ArgumentError, "Missing required workflow" if flags[:workflow].nil?
    if flags[:workflow] =~ /:/
      flags[:repository], flags[:workflow] = flags[:workflow].split(/:/, 2)
    end
    
    # Load the optional steps
    flags[:steps] = []
    while args.size > 0
      flags[:steps] << args.shift
    end
    raise NotImplementedError, 'Can run entire workflow only right now' unless flags[:steps].empty?
    
    ap({:flags => flags}) if flags[:debug]
    
    # boot up
    ENV['ROBOT_ENVIRONMENT'] = flags[:robot_environment]
    ENV['ROBOT_LOG_LEVEL'] = flags[:robot_log_level]
    ENV['ROBOT_LOG'] = flags[:robot_log]
    ENV['ROBOT_LOG'] = 'stdout' if ENV['ROBOT_LOG'] == '-'
    if flags[:debug]
      ENV['ROBOT_LOG_LEVEL'] = 'debug'
      ENV['RESTCLIENT_LOG'] ||= 'stdout'
      ap({:env => ENV})
    end
    begin
      puts "Loading boot file..." if flags[:debug]
      require File.expand_path(File.dirname(__FILE__) + '/../config/boot')
    rescue => e
      puts e.backtrace
      raise ArgumentError, "Missing boot file: #{e.message}"
    end
    
    # Perform actual work finally
    n = 0
    working = true
    Signal.trap("QUIT") { working = false }
    start = Time.now
    begin
      ROBOT_LOG.info("Starting RobotMaster #{RobotMaster::VERSION}: #{flags[:workflow]}")
      while working do
        begin
          n += perform(flags[:workflow], flags)
        rescue => e
          ROBOT_LOG.error("#{flags[:workflow]}: #{e}")
          raise e unless flags[:loop] > 0 # don't error out if looping
        end
      
        # sleep for a while if we're looping, otherwise quit
        if flags[:loop] > 0
          nsec = flags[:loop] + rand(0..5) # add random backoff
          ROBOT_LOG.debug { "Waiting #{nsec} seconds before next run" }
          sleep nsec
        else
          working = false # iterate once
        end
      end
    ensure
      elapsed = Time.now - start
      ROBOT_LOG.info("Finished RobotMaster: #{flags[:workflow]} (#{elapsed.to_i} seconds #{n} jobs)")
    end
  end
end

# __MAIN__
RobotMasterCLI.new.run(ARGV)
