#!/usr/bin/env ruby
#
# Usage: robot-master [-v] [repository:]workflow [step [step2 ...]]
#        where repository = 'dor' by default
#
# @example
#   robot-master accessionWF
#   robot-master assemblyWF jp2-create
#   robot-master gisDeliveryWF load-raster load-vector
#   robot-master --repository=sdr sdrIngestWF
#
require 'optparse'
require 'awesome_print'

class RobotMasterCLI
  def perform(workflow, flags = {})
    ap({:workflow => workflow, :flags => flags}) if flags[:verbose]
    RobotMaster::Workflow.perform(flags[:repository], workflow)
  end
  
  def run(args)
    flags = {
      :verbose => false,
      :debug => false,
      :repository => 'dor',
      :robot_environment => ENV['ROBOT_ENVIRONMENT'] || 'development',
      :robot_log_level => ENV['ROBOT_LOG_LEVEL'] || 'info',
      :robot_log => ENV['ROBOT_LOG'] || 'robot-master.log'
    }
    
    args = %w{--help} if args.nil? or args.empty?
  
    OptionParser.new do |opts|
      opts.banner = "Usage:\t#{File.basename(__FILE__)} [flags] [repo:]workflow [step [step2 ...]]"
      opts.on('--repository=REPOSITORY', "Use the given repository (default: #{flags[:repository]})") do |v|
        flags[:repository] = v
      end
      opts.on('--environment=ENV', "Use the given environment (default: #{flags[:robot_environment]})") do |v|
        flags[:robot_environment] = v
      end
      opts.on('--log-level=LEVEL', "Use the given log-level (default: #{flags[:robot_log_level]})") do |v|
        flags[:robot_log_level] = v
      end      
      opts.on('--log=FILE', "Use the given log file (default: #{flags[:robot_log]})") do |v|
        flags[:robot_log] = v
      end      
      opts.on('-v', '--verbose', 'Run verbosely, use multiple times for debug level output') do
        flags[:debug] = true if flags[:verbose]  # -vv
        flags[:verbose] = true
      end
    end.parse!(args)
    ap({:args => args}) if flags[:debug]
    
    # Initialize the workflow, and set the repository if prepended with :
    flags[:workflow] = args.shift
    raise ArgumentError, "Missing required workflow" if flags[:workflow].nil?
    if flags[:workflow] =~ /:/
      flags[:repository], flags[:workflow] = flags[:workflow].split(/:/, 2)
    end
    
    # Load the optional steps
    flags[:steps] = []
    while args.size > 0
      flags[:steps] << args.shift
    end
    
    ap({:flags => flags}) if flags[:debug]
    
    # boot up
    ENV['ROBOT_ENVIRONMENT'] = flags[:robot_environment]
    ENV['ROBOT_LOG_LEVEL'] = flags[:robot_log_level]
    ENV['ROBOT_LOG_LEVEL'] = 'debug' if flags[:debug]
    ENV['ROBOT_LOG'] = flags[:robot_log]
    ap({:env => ENV}) if flags[:debug]
    begin
      puts "Loading boot file..." if flags[:debug]
      require File.expand_path(File.dirname(__FILE__) + '/../config/boot')
    rescue Exception => e
      raise ArgumentError, "Missing boot file: #{e.message}"
    end
    
    # Perform actual work finally
    ROBOT_LOG.info("Starting RobotMaster #{RobotMaster::VERSION}: #{flags[:workflow]}")
    begin
      perform(flags[:workflow], flags)
    rescue Exception => e
      ROBOT_LOG.error("#{flags[:workflow]}: #{e}")
      raise e
    end
    
    ROBOT_LOG.info("Finish RobotMaster: workflow=#{flags[:workflow]}")
  end
end

# __MAIN__
RobotMasterCLI.new.run(ARGV)