#!/usr/bin/env ruby
#
# Usage: robot-download-workflows [-v] [dor-url cert_file key_file]
#
require 'optparse'
require 'fileutils'
require 'dor-services'

# Load the environment file based on Environment.  Default to development
ENV['ROBOT_ENVIRONMENT'] ||= 'development'
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'config', 'environments', ENV['ROBOT_ENVIRONMENT']))

class RobotDownloadWorkflowsCLI
  def initialize(output_folder)
    @output_folder = Pathname(output_folder)
    @output_folder.mkpath unless @output_folder.directory?
  end

  def run
    puts 'Loading druids for all workflow objects...'
    Dor::WorkflowObject.find_each do |workflow_object|
      puts "Found workflow #{workflow_object.label} (#{workflow_object.pid})"

      # Find out name and repo name from XML
      doc = Nokogiri::XML(workflow_object.datastreams['workflowDefinition'].content)
      name = doc.root['id']
      repo = doc.root['repository']

      # Save workflow XML to a file
      fn = @output_folder.join(repo).join("#{name}.xml")
      fn.dirname.mkdir unless fn.dirname.directory?
      puts "Saving #{name} into file #{fn}"
      fn.write(doc.to_xml)
    end
  end
end

# __MAIN__
require File.expand_path(File.dirname(__FILE__) + '/../config/boot')
RobotDownloadWorkflowsCLI.new('config/workflows').run

# Skip these workflows, we don't want them to run robots
# these workflows are defunct.
skipfiles = %w(
  dor/digitizationWF.xml
  dor/dpgImageWF.xml
  dor/eemsAccessionWF.xml
  dor/googleScannedBookWF.xml
  dor/hydrusAssemblyWF.xml
  sdr/sdrIngestWF.xml
).each do |fn|
  path = Pathname("config/workflows/#{fn}")
  if path.exist?
    puts "Deleting blacklisted #{path}"
    path.delete
  end
end
