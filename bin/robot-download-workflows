#!/usr/bin/env ruby
#
# Usage: robot-download-workflow [-v] [dor-url]
#
require 'optparse'
require 'awesome_print'
require 'rest-client'
require 'dor-services'
require 'solrizer'
  
# XXX: get from config/environment/environment.rb
FEDORA_URL = 'https://sul-dor-dev.stanford.edu/fedora'

Dor::Config.configure do
 solrizer.url 'http://sul-solr.stanford.edu/solr/argo_dev'
end

class RobotDownloadWorkflowsCLI
  def run(args)

    flags = {
      :verbose => false,
      :debug => false
    }
  
    OptionParser.new do |opts|
      opts.banner = "Usage:\t#{File.basename(__FILE__)} [-v] [dor-url cert_file key_file]"
      opts.on('-v', '--verbose', 'Run verbosely, use multiple times for debug level output') do
        flags[:debug] = true if flags[:verbose]  # -vv
        flags[:verbose] = true
      end
    end.parse!(args)
    ap({:args => args}) if flags[:debug]
    
    # Initialize the workflow, and set the repository if prepended with :
    dor_url = args.shift || FEDORA_URL
    cert_file = args.shift || 'config/certs/dlss-dev-drh-dor-dev.crt'
    key_file = args.shift || 'config/certs/dlss-dev-drh-dor-dev.key'
    ap({:dor_url => dor_url, :cert_file => cert_file, :key_file => key_file, :flags => flags}) if flags[:debug]
    
    puts "Loading druids for all workflow objects..."
    solr = Dor::SearchService.solr
    # ap({:solr => solr})
    res = Dor::SearchService.query("objectType_t:workflow", rows: 1000, fl: "id,workflow_name_s")
    # ap({:response => res})
    res[:response][:docs].each do |doc|
      if doc[:workflow_name_s].nil?
        puts "ERROR: Skipping malformed workflow #{doc[:id]}"
        next
      end
      druid = doc[:id]
      wf = doc[:workflow_name_s].first
      ap({:druid => druid, :wf => wf, :flags => flags}) if flags[:debug]
      uri = URI.parse("#{FEDORA_URL}/objects/#{druid}/datastreams/workflowDefinition/content")
      fn = "config/workflows/dor/#{wf}.xml"
      begin
        puts "Downloading #{uri} to #{fn}"
        res = RestClient::Resource.new(
          uri.to_s,
          :ssl_client_cert  =>  OpenSSL::X509::Certificate.new(File.read(cert_file)),
          :ssl_client_key   =>  OpenSSL::PKey::RSA.new(File.read(key_file), ''),
          :verify_ssl       =>  OpenSSL::SSL::VERIFY_PEER
        )
        ap({:res => res}) if flags[:debug]
        File.open(fn, 'wb').write(res.get)
      rescue OpenSSL::SSL::SSLError => e
        puts "#{e.class}: #{e}"
      end
      
    end
  end
end

# __MAIN__
require File.expand_path(File.dirname(__FILE__) + '/../config/boot')
RobotDownloadWorkflowsCLI.new.run(ARGV)